package main

type TGenerationMethods string
type TGeneratorType string

const (
	// GenerationAPI indicates that the list is generated by calling an API
	GenerationAPI TGenerationMethods = "API"
	// GenerationEvents indicates that the list is generated by listening to on-chain events
	GenerationEvents TGenerationMethods = "Events"
	// GenerationExternalList indicates that the list is generated by retrieving a list from an external source
	GenerationExternalList TGenerationMethods = "External"
	// GenerationLegacyList is the same as GenerationExternalList, but it is for deprecated lists
	GenerationLegacyList TGenerationMethods = "Legacy"
	// GenerationChain indicates that the list is generated by a chain-specific method
	GenerationChain TGenerationMethods = "Chains"

	// GeneratorToken indicates that the list is a token list
	GeneratorToken TGeneratorType = "Token"
	// GeneratorPool indicates that the list is a pool list
	GeneratorPool TGeneratorType = "Pool"
)

type TGenerators struct {
	Exec             func()
	Name             string
	Description      string
	GenerationMethod TGenerationMethods
	GeneratorType    TGeneratorType
	Tags             []string
	Exclude          bool // Should we exclude this generator from computation (ex: old, deprecated)
}

var GENERATORS = map[string]TGenerators{
	`1inch`: {
		Exec:             build1InchTokenList,
		Name:             `1Inch`,
		Description:      `A list of tokens available in 1Inch DeFi / DEX aggregator`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`aerodrome`: {
		Exec:             buildAeroTokenList,
		Name:             `Aerodrome`,
		Description:      `A list of tokens available on Aerodrome.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`ajna`: {
		Exec:             buildAjnaTokenList,
		Name:             `Ajna`,
		Description:      `A list of tokens available on Ajna.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`ajna-static`: {
		Exec:             buildAjnaStaticTokenList,
		Name:             `Ajna (Static)`,
		Description:      `A list of non-rebased tokens that could work on Ajna.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`bebop`: {
		Exec:             buildBebopTokenList,
		Name:             `Bebop`,
		Description:      `A list of tokens available on Bebop.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`blockscout`: {
		Exec:             buildBlockScoutTokenList,
		Name:             `Blockscout`,
		Description:      `A list of tokens available on Blockscout, an Open-Source Explorer`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`coingecko`: {
		Exec:             buildCoingeckoTokenList,
		Name:             `CoinGecko`,
		Description:      `A list of tokens available showing in CoinGecko data agregator.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`consensys`: {
		Exec:             buildConsensysTokenList,
		Name:             `Consensys`,
		Description:      `A list of tokens available on Linea, powered by Consensys`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`cowswap`: {
		Exec:             buildCowswapTokenList,
		Name:             `Cow Swap`,
		Description:      `A list of tokens available for trading on CoW Swap, a DEX focused on MEV protection.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`curve`: {
		Exec:             buildCurveTokenList,
		Name:             `Curve`,
		Description:      `A list of tokens available for trading on Curve, the largest stableswap.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`defillama`: {
		Exec:             buildDefillamaTokenList,
		Name:             `DefiLlama`,
		Description:      `A list of tokens available in DefiLlama token service`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	// `ethereum-etherscan`: { // deprecated, use scan-1 instead
	// 	Exec:             buildScanTokenList_1,
	// 	Name:             `Ethereum (Etherscan)`,
	// 	Description:      `The top 1000 of tokens available on Ethereum blockchain, retrieved from Etherscan.`,
	// 	GenerationMethod: GenerationAPI,
	// 	GeneratorType:    GeneratorToken,
	// },
	`etherscan`: {
		Exec:             buildScanTokenList,
		Name:             `Etherscan`,
		Description:      `The top of tokens available on by market cap.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
		Exclude:          true,
	},
	`filecoin`: {
		Exec:             buildFilecoinTokenList,
		Name:             `Filecoin`,
		Description:      `A list of tokens available through different Filecoin explorers.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`filecoin-static`: {
		Exec:             buildFilecoinStaticTokenList,
		Name:             `Filecoin (Static)`,
		Description:      `A list of curated tokens available on Filecoin.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`ledger`: {
		Exec:             buildLedgersTokenList,
		Name:             `Ledger`,
		Description:      `A list of tokens supported in Ledger Live App`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`messari`: {
		Exec:             buildMessariTokenList,
		Name:             `Messari`,
		Description:      `A list of tokens registered in Messari`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`optimism`: {
		Exec:             buildOptimismTokenList,
		Name:             `Optimism`,
		Description:      `A list of tokens used as the source of truth for the Optimism Gateway.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`paraswap`: {
		Exec:             buildParaswapTokenList,
		Name:             `Paraswap`,
		Description:      `A list of tokens available for trading on Paraswap DEX`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	// `polygon-zkevm`: { // deprecated, use scan-1101 instead
	// 	Exec:             buildScanTokenList_1101,
	// 	Name:             `Polygon (ZK-EVM)`,
	// 	Description:      `A list of tokens available on the Polygon zkEVM, the first EVM zero-knowledge scaling solution.`,
	// 	GenerationMethod: GenerationAPI,
	// 	GeneratorType:    GeneratorToken,
	// },
	`portals`: {
		Exec:             buildPortalsTokenList,
		Name:             `Portals`,
		Description:      `A list of tokens available for trading on Portals DEX.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`routescan`: {
		Exec:             buildRouteScanTokenList,
		Name:             `Routescan`,
		Description:      `Routescan is the first multichain ecosystem explorer, search, API, and analytics platform for all major EVM`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`tns`: {
		Exec:             buildTNSTokenList,
		Name:             `Token Name Service`,
		Description:      `Token Name Service is a decentralized naming service for tokens on Ethereum.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`smolAssets`: {
		Exec:             buildSmolAssetsTokenList,
		Name:             `SmolAssets`,
		Description:      `A list of tokens supported by Smoldapp Token Assets repository`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`sushiswap-pairs`: {
		Exec:             buildSushiswapPairsTokenList,
		Name:             `SushiSwap (token pairs)`,
		Description:      `A list of token used in the SushiSwap Liquidity Pools.`,
		GenerationMethod: GenerationEvents,
		GeneratorType:    GeneratorPool,
	},
	`sushiswap-pools`: {
		Exec:             buildSushiswapPoolsTokenList,
		Name:             `SushiSwap (pools)`,
		Description:      `A list of Liquidity Pool available on SushiSwap DEX.`,
		GenerationMethod: GenerationEvents,
		GeneratorType:    GeneratorPool,
	},
	`sushiswap`: {
		Exec:             buildSushiswapTokenList,
		Name:             `SushiSwap`,
		Description:      `A list of tokens available on SushiSwap DEX.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`uniswap-pairs`: {
		Exec:             buildUniswapPairsTokenList,
		Name:             `UniSwap (pairs)`,
		Description:      `A list of token pairs (liquidity pools) available for trading on UniSwap.`,
		GenerationMethod: GenerationEvents,
		GeneratorType:    GeneratorPool,
	},
	`uniswap-pools`: {
		Exec:             buildUniswapPoolsTokenList,
		Name:             `UniSwap (pools)`,
		Description:      `A list of Liquidity Pool available on Uniswap V2 DEX.`,
		GenerationMethod: GenerationEvents,
		GeneratorType:    GeneratorPool,
	},
	`uniswap`: {
		Exec:             buildUniswapTokenList,
		Name:             `UniSwap`,
		Description:      `A list of tokens available on UniSwap DEX.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`velodrome`: {
		Exec:             buildVeloTokenList,
		Name:             `Velodrome`,
		Description:      `A list of tokens available on Velodrome.`,
		GenerationMethod: GenerationExternalList,
		GeneratorType:    GeneratorToken,
	},
	`yearn`: {
		Exec:             buildYearnTokenList,
		Name:             `Yearn`,
		Description:      `A list of Yearn's vaults and their underlying tokens.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`yearn-min`: {
		Exec:             buildYearnMinimalTokenList,
		Name:             `Yearn Minimal`,
		Description:      `A minimal list of Yearn's vaults and their underlying tokens.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
	`zksync`: {
		Exec:             buildZkSyncTokenList,
		Name:             `ZKSync`,
		Description:      `A list of zkSync: The future-proof zkEVM.`,
		GenerationMethod: GenerationAPI,
		GeneratorType:    GeneratorToken,
	},
}
